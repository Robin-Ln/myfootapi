stages:
  - compile
  - test
  - build
  - image

cache:
  paths:
    - .m2/
    - target/
    - ${TMP_DIR}/
    - .sonar/cache

before_script:
  - mkdir -p ${TMP_DIR}

variables:
  TMP_DIR: tmp
  VARRIABLES_FILE: ${TMP_DIR}/varriables

compile:
  image: maven:latest
  stage: compile
  script:
    - mvn --batch-mode -Dmaven.repo.local=.m2 -Dmaven.test.skip=true compile

test:
  image: maven:latest
  stage: test
  services:
    - mysql:latest
  variables:
    MYSQL_DATABASE: "footapi"
    MYSQL_ROOT_PASSWORD: "1azerty."
  script:
    - mvn --batch-mode -Dmaven.repo.local=.m2 -P gitlab test

build:
  image: maven:latest
  stage: build
  script:
    - mvn --batch-mode -Dmaven.repo.local=.m2 -Dmaven.test.skip=true package
    - echo VERSION=$(mvn help:evaluate  -Dexpression=project.version -q -DforceStdout) >> ${VARRIABLES_FILE}
    - echo BUILD_NAME=$(mvn help:evaluate  -Dexpression=project.build.finalName -q -DforceStdout) >> ${VARRIABLES_FILE}
    - echo PROJECT_NAME=$(mvn help:evaluate  -Dexpression=project.artifactId -q -DforceStdout) >> ${VARRIABLES_FILE}
  artifacts:
    paths:
      - target/*.jar
    expire_in: 30 days

image_dockerhub:
  image: docker:latest
  stage: image
  when: manual
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - source ${VARRIABLES_FILE}
    - echo $DOCKER_TOKKEN | docker login -u $DOCKER_USER --password-stdin
  script:
    - docker build --build-arg JAR_FILE=target/${BUILD_NAME}.jar -t ${DOCKER_USER}/${PROJECT_NAME}:${VERSION} -f docker/Dockerfile .
    - docker tag ${DOCKER_USER}/${PROJECT_NAME}:${VERSION} ${DOCKER_USER}/${PROJECT_NAME}:latest
    - docker push ${DOCKER_USER}/${PROJECT_NAME}:${VERSION}
    - docker push ${DOCKER_USER}/${PROJECT_NAME}:latest

image_google_cloud:
  image: docker:latest
  stage: image
  when: manual
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    GOOGLE_CLOUD_HOST: eu.gcr.io
    GOOGLE_CLOUD_PROJECT_NAME: foot-api
  before_script:
    - source ${VARRIABLES_FILE}
    - echo $GOOGLE_CLOUD_TOKKEN | docker login -u oauth2accesstoken --password-stdin https://${GOOGLE_CLOUD_HOST}
  script:
    - docker build --build-arg JAR_FILE=target/${BUILD_NAME}.jar -t ${GOOGLE_CLOUD_HOST}/${GOOGLE_CLOUD_PROJECT_NAME}/${PROJECT_NAME}:${VERSION} -f docker/Dockerfile .
    - docker tag ${GOOGLE_CLOUD_HOST}/${GOOGLE_CLOUD_PROJECT_NAME}/${PROJECT_NAME}:${VERSION} ${GOOGLE_CLOUD_HOST}/${GOOGLE_CLOUD_PROJECT_NAME}/${PROJECT_NAME}:latest
    - docker push ${GOOGLE_CLOUD_HOST}/${GOOGLE_CLOUD_PROJECT_NAME}/${PROJECT_NAME}:${VERSION}
    - docker push ${GOOGLE_CLOUD_HOST}/${GOOGLE_CLOUD_PROJECT_NAME}/${PROJECT_NAME}:latest

sonarcube:
  image: maven:latest
  stage: test
  variables:
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar  # Defines the location of the analysis task cache
    GIT_DEPTH: 0  # Tells git to fetch all the branches of the project, required by the analysis task
  before_script:
    - source ${VARRIABLES_FILE}
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=$PROJECT_NAME -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN
#  only:
#    - merge_requests
#    - master
#    - develop
